package stepDefinitions;

import Utility.PropertyHolder;
import base.TestBase;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import data.Pet_TestData;
import endpoints.pet.PetEndpoint;
import endpoints.prospect.prospectEndPoint;
import io.cucumber.datatable.DataTable;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import model.Response.Pet.CreatePetProspectResponse.CreatePetProspectRes;
import model.Response.Pet.GetPetBreed.PetBreed;
import model.Response.Prospect.CreateProspectResponse.AddProspectResponse;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class createPet extends TestBase {
    Response response;
    Pet_TestData data=new Pet_TestData();

    @When("^User hit the GET petBreed request for (.+)$")
    public void user_hit_the_get_petbreed_request_for(String type) throws IOException {
        String URI=PropertyHolder.getProperty("URI").concat(type);
        reqSpec = given().spec(requestSpesification());
        response = reqSpec.when().get(URI);
    }

    @And("^User fetch the BreedType and BreedID of the pet$")
    public void user_fetch_the_breedtype_and_breedid_of_the_pet(){
//        int i;
//        String BreedType;
//        List<String> BreedID=new ArrayList<>();
//        PetBreed breed=response.getBody().as(PetBreed.class);
//        BreedType=breed.getLabel();
//        for(i=0;i<breed.getBreeds().size();i++){
//            BreedID.add(breed.getBreeds().get(i).getValue());
//            PropertyHolder.setProperty("BreedID["+i+"]",BreedID.get(i));
//        }
//        PropertyHolder.setProperty("BreedType",BreedType);
        String breedID1= getJsonPath(response,"[0].breeds[0].value");
        String breedID2= getJsonPath(response,"[1].breeds[0].value");
        PropertyHolder.setProperty("breedID1",breedID1);
        PropertyHolder.setProperty("breedID2",breedID2);
    }

    @When("^User hit the POST petProspect request$")
    public void user_hit_the_post_petprospect_request(DataTable table) throws IOException {
        String breedID=null;
        String prospectID=null;
        Map<String, String> testData = new HashMap<>(table.asMap(String.class, String.class));

        //scenario coverage for breedID - valid/null/invalid
        if(testData.get("breed").equalsIgnoreCase("valid")){
            if(testData.get("type").equalsIgnoreCase("dog")){
                breedID=PropertyHolder.getProperty("breedID1");
            }
            else if(testData.get("type").equalsIgnoreCase("cat")){
                breedID=PropertyHolder.getProperty("breedID2");
            }
            else{log.info("Invalid Pet type provided!!!");}
        }
        else if(testData.get("breed").equalsIgnoreCase("null")){
            breedID=null;
        }
        else if(testData.get("breed").equalsIgnoreCase("invalid")){
            breedID="123";
        }

        //scenario coverage for prospectID - valid/null/invalid
        if(testData.get("prospect").equalsIgnoreCase("valid")){
            prospectID=PropertyHolder.getProperty("ProspectID");
        }
        else if(testData.get("prospect").equalsIgnoreCase("invalid")){
            prospectID="12";
        }
        else if(testData.get("prospect").equalsIgnoreCase("null")){
            prospectID.equals(null);
        }

        reqSpec = given().spec(requestSpesification()).body(data.addPetProspectpayload(testData.get("name"),testData.get("type"),
        breedID,testData.get("DOB"),prospectID));
        response = reqSpec.when().post(PropertyHolder.getProperty("URI"));
    }

    @And("^User fetches PetID and timestamp values$")
    public void user_fetches_petid_and_timestamp_values(){
        CreatePetProspectRes res=response.getBody().as(CreatePetProspectRes.class);
        String PetID=res.getPayload().getResponses().get(0).getId();
        String timeStamp=res.getPayload().getResponses().get(0).getCreatedTimestamp();
        PropertyHolder.setProperty("PetID",PetID);
        PropertyHolder.setProperty("PetTimeStamp",timeStamp);
    }
}
